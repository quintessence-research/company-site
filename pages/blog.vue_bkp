<template>
  <div>
    <h1>Blog Posts (main page)</h1>
    <BlogList />
  </div>
</template>

<!-- <template>
  
  <main>
    <ContentDoc>
      <template v-slot="{ doc }">
        <article>
          <h1>{{ doc.title }}</h1>
          <ContentRenderer :value="doc" />
        </article>
      </template>
      <template #not-found>
        <h1>Document not found</h1>
      </template>
    </ContentDoc>
  </main>
</template> -->
<!-- <template>
  <div class="p-6">
    <h1 class="text-3xl font-bold mb-6">Blog Posts</h1>
    <main>
      <ContentDoc />
    </main>
  </div>
</template> -->
<!-- <p-dataTable :value="posts" :rows="10" paginator>
      <template #header>
        <tr>
          <th class="py-3 px-4">Order</th>
          <th class="py-3 px-4">Title</th>
          <th class="py-3 px-4">Excerpt</th>
          <th class="py-3 px-4">Date</th>
        </tr>
      </template>
<template #body="slotProps">
        <tr>
          <td class="py-3 px-4">{{ slotProps.data.order }}</td>
          <td class="py-3 px-4">
            <NuxtLink :to="`/blog/${slotProps.data.slug}`" class="text-blue-500 hover:underline">
              {{ slotProps.data.title }}
            </NuxtLink>
          </td>
          <td class="py-3 px-4">{{ slotProps.data.excerpt }}</td>
          <td class="py-3 px-4">{{ formatDate(slotProps.data.date) }}</td>
        </tr>
      </template>
</p-dataTable> -->

<!-- <script setup lang="ts">
import { ref, onMounted } from 'vue'
import { queryContent } from '#content'

// TypeScript interfaces
interface BlogPost {
  title: string
  slug: string
  excerpt: string
  date: string
  order: number
}

const posts = ref<BlogPost[]>([])

const fetchPosts = async () => {
  const content = await queryContent<BlogPost>('blog').sort({ order: 1 }).find()
  posts.value = content
}

onMounted(() => {
  fetchPosts()
})

const formatDate = (date: string) => {
  return new Date(date).toLocaleDateString()
}
</script> -->
